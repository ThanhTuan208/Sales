// <auto-generated />
using System;
using CRUD_asp.netMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRUD_asp.netMVC.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.ActionViewModel.Login", b =>
                {
                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.ActionViewModel.Register", b =>
                {
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Register");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "TP HCM",
                            Date = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "longtinh@gmail.com",
                            FullName = "Nguyen Thanh Long",
                            Password = "123456",
                            PhoneNumber = "0343424334",
                            Position = "Customer",
                            UserID = 2,
                            UserName = "LongTinh"
                        });
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Manager");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "TP HCM",
                            Email = "nguyenthanhtuankrp1@gmail.com",
                            FullName = "Nguyen Thanh Tuan",
                            Password = "admmin",
                            PhoneNumber = "0358986823",
                            Position = "Manager",
                            StartDate = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = 1,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manager",
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleID");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22222222-2222-2222-2222-222222222222",
                            Email = "nguyenthanhtuankrp1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGhZBXBsy/SAWop7np1SB500eP6vRfUwZNb8eitfnV26cygqJSe+Ks/v2da7SxC+uQ==",
                            PhoneNumber = "0358986823",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            RoleID = 1,
                            SecurityStamp = "5f8a17cb-bb0d-4ae4-99cb-abcde1234567",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22222222-2222-2222-2222-222222222222",
                            Email = "nguyenthanhtuankrp1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAGa4VXA3HYnofgsMNO/bcZ8e+1MBrDEjtBTeCfYi0k1HUn9ForK2SKEUvKj+idFfw",
                            PhoneNumber = "034342434",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            RoleID = 2,
                            SecurityStamp = "5f8a17cb-bb0d-4ae4-99cb-abcde1234567",
                            TwoFactorEnabled = false,
                            UserName = "LongTinh"
                        });
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.AddToCart", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Manufacturer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Manufactures");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Apple"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Samsung"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Sony"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Dell"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Asus"
                        });
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.OrderDetail", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(10)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("orderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("orderID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Orders", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Payment", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("paidAmount")
                        .HasColumnType("float");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Products", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("manuID")
                        .HasColumnType("int");

                    b.Property<int>("typeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("manuID");

                    b.HasIndex("typeID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Điện thoại Apple với camera 48MP, chip A16 Bionic.",
                            Name = "iPhone 14 Pro",
                            PicturePath = "iphone14pro.jpg",
                            Price = 999.0,
                            manuID = 1,
                            typeID = 1
                        },
                        new
                        {
                            ID = 2,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Flagship mạnh mẽ nhất của Samsung, màn hình 120Hz.",
                            Name = "Samsung Galaxy S23 Ultra",
                            PicturePath = "s23ultra.jpg",
                            Price = 1199.0,
                            manuID = 2,
                            typeID = 1
                        },
                        new
                        {
                            ID = 3,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tai nghe chống ồn tốt nhất, chất âm cao cấp.",
                            Name = "Sony WH-1000XM5",
                            PicturePath = "sonyxm5.jpg",
                            Price = 349.0,
                            manuID = 3,
                            typeID = 4
                        },
                        new
                        {
                            ID = 4,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Laptop Apple chạy chip M2, hiệu năng mạnh mẽ.",
                            Name = "MacBook Pro M2 13 inch",
                            PicturePath = "macbookpro13.jpg",
                            Price = 1299.0,
                            manuID = 1,
                            typeID = 2
                        },
                        new
                        {
                            ID = 5,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Laptop gaming mỏng nhẹ, card RTX 4060.",
                            Name = "Asus ROG Zephyrus G14",
                            PicturePath = "zephyrusg14.jpg",
                            Price = 1599.0,
                            manuID = 5,
                            typeID = 2
                        },
                        new
                        {
                            ID = 6,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tablet Apple với chip M1, thiết kế mỏng nhẹ.",
                            Name = "iPad Air 5th Gen",
                            PicturePath = "ipadair5.jpg",
                            Price = 599.0,
                            manuID = 1,
                            typeID = 3
                        },
                        new
                        {
                            ID = 7,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tablet cao cấp với màn hình AMOLED 120Hz.",
                            Name = "Samsung Galaxy Tab S8",
                            PicturePath = "tabs8.jpg",
                            Price = 699.0,
                            manuID = 2,
                            typeID = 3
                        },
                        new
                        {
                            ID = 8,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đồng hồ thông minh của Apple, theo dõi sức khỏe.",
                            Name = "Apple Watch Series 9",
                            PicturePath = "applewatch9.jpg",
                            Price = 399.0,
                            manuID = 1,
                            typeID = 5
                        },
                        new
                        {
                            ID = 9,
                            Created = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đồng hồ thông minh của Apple, theo dõi sức khỏe.",
                            Name = "Apple Watch Series 10",
                            PicturePath = "applewatch10.jpg",
                            Price = 999.0,
                            manuID = 1,
                            typeID = 5
                        });
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Prototype", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Prototypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Smartphone"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Laptop"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Tablet"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Headphones"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Smartwatch"
                        });
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Reviews", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Customer", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", "Users")
                        .WithOne("Customer")
                        .HasForeignKey("CRUD_asp.netMVC.Models.Account.Customer", "UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Manager", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", "Users")
                        .WithOne("Manager")
                        .HasForeignKey("CRUD_asp.netMVC.Models.Account.Manager", "UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Staff", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", "Users")
                        .WithOne("Staff")
                        .HasForeignKey("CRUD_asp.netMVC.Models.Account.Staff", "UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Users", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.AddToCart", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Product.Products", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", "Users")
                        .WithMany("Carts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.OrderDetail", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Product.Products", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUD_asp.netMVC.Models.Product.Orders", "Orders")
                        .WithMany("OrderDetail")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Orders", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Payment", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Product.Orders", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("CRUD_asp.netMVC.Models.Product.Payment", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Products", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Product.Manufacturer", "Manufactures")
                        .WithMany("products")
                        .HasForeignKey("manuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUD_asp.netMVC.Models.Product.Prototype", "Types")
                        .WithMany("products")
                        .HasForeignKey("typeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufactures");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Reviews", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Product.Products", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CRUD_asp.netMVC.Models.Account.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Account.Users", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Customer");

                    b.Navigation("Manager");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Manufacturer", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Orders", b =>
                {
                    b.Navigation("OrderDetail");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Products", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CRUD_asp.netMVC.Models.Product.Prototype", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
